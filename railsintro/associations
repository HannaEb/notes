
WHY ASSOCIATIONS?

In Rails, an association is a connection between two Active Record models. Associations make common operations simpler and
easier. They are implemented using macro-style calls, so that you can declaratively add features to your models.


THE TYPES OF ASSOCIATIONS

belongs_to                Sets up a one-to-one connection with another model, such that each instance of the declaring
                          model belongs to one instance of the other model. Must use the singular term
has_one                   Sets up a one-to-one connection with another model. This association indicates that each instance
                          of a model contains or possesses one instance of another model
has_many                  Indicates a one-to-many connection with another model. Often found on the other side of a
                          belongs_to association. It indicates that each instance of the model has zero or more instances
                          of another model
has_many :through         Often used to set up a many-to-many connection with another model. It indicates that the
                          declaring model can be matched with zero or more instances of another model by proceeding through
                          a third model. This association is also useful for setting up 'shortcuts' through nested
                          has_many associations
has_one :through          Sets up a one-to-one connection with another model. This association indicates that the
                          declaring model can be matched with one instance of another model by proceeding through a third
                          model
has_and_belongs_to_many   Creates a direct many-to-many connection with another model, with no intervening model

If you want to set up a one-to-one relationship between two models using belongs_to and has_one, the foreign key needs to
go on the table for the class declaring the belongs_to association.

Rails offers two different ways to declare a many-to-many relationship between models. The simpler has_and_belongs_to_many
way allows you to made the association directly, whereas has_many :through makes the association indirectly through a
joint model. The simplest rule of thumb is that you should set up a has_many :through relationship if you need to work
with the relationship model as an independent entity. If you don't need to do anything with the relationship model, it
may be simpler to set up a has_and_belongs_to_many relationship, though you will have to remember to create the joining
table in the database. You should use has_many :through if you need validations, callbacks or extra attributes on the
join model.

With polymorphic associations a model can belong to more than one other model, on a single association. You can think of
a polymorphic belongs_to declaration as setting up an interface that any other model can use. You need to declare both a
foreign key column and a type column in the model that declares the polymorphic interface.
( => e.g. :imageable_id, :imageable_type )

Sometimes a model should have a relation to itself. This situation can be modeled with self-joining associations.


TIPS, TRICKS, AND WARNINGS

All of the association methods are built around caching, which keeps the result of the most recent query available for
further operations. The cache is even shared across methods. If you want to reload the cache, for example because data
has been changed by some other part of the application, you can call reload on the association.

Because creating an association adds a method with that name to the model, it is a bad idea to give an association a
name that is already used for an instance method of ActiveRecord::Base as the association method would override the base
method.

You are responsible for maintaining your database schema to match your associations. In practice, this means two things:
for belongs_to associations you need to create foreign keys, and for has_and_belongs_to_many associations you need to
create the appropriate join table.

By default, associations look for objects only within the current module's scope. To associate a model with a model in a
different namespace, you must specify the complete class name in your association declaration.

It is normal for associations to work in two directions, requiring declaration on two different models. By default,
Active Record doesn't know about the connection between these associations which can lead to two copies of an object
getting out of sync. Active Record provides the :inverse_of option so that you can inform it of these relations. However,
inverse_of support does  not work with :through, :polymorphic and :as associations and for belongs_to associations
has_many inverse associations are ignored.

Every association will attempt to automatically find the inverse association and set the :inverse_of option heuristically
based on the association name. Most associations with standard names will be supported. However, associations that
contain :conditions, :through, :polymorphic or :foreign_key will not have their inverses set automatically.


DETAILED ASSOCIATION REFERENCE

When you declare a belongs_to or has_one association, the declaring class automatically gains five methods related to the
association. In all of these methods, association is replaced with the symbol passed as the first argument to belongs_to
or has_one:
association                           Returns the associated object, if any. If no associated object is found, it returns
                                      nil
association=(associate)               Assigns an associated object to this object. Behind the scenes, this means
                                      extracting the primary key from the associated object and setting this object's
                                      foreign key to the same value
build_association(attributes = {})    Returns a new object of the associated type. This object will be instantiated from
                                      the passed attributes, and the link through this object's foreign key will be set,
                                      but the associated object will not yet be saved
create_association(attributes = {})   Returns a new object of the associated type. This object will be instantiated from
                                      the passed attributes, the link through this object's foreign key will be set, and
                                      once it passes all of the validations specified on the associated model, the
                                      associated object will be saved
create_association!(attributes = {})  Does the same as create_association above, but raises ActiveRecord::RecordInvalid
                                      if the record is invalid

Customizations of the behavior of the belongs_to and has_one association reference can be easily accomplished by passing
options when you create the association. The following options are supported:
:autosave         If the option is set to true, Rails will save any loaded members and destroy members that are marked
                  for destruction whenever you save the parent object
:class_name       If the name of the other model cannot be derived from the association name, you can use this option to
                  supply the model name
:dependent        Controls what happens to associated objects when their owner is destroyed. You should not specify this
                  option on a belongs_to association that is connected with a has_many association on the other class.
                  Doing so can lead to orphaned records in your database
                  :destroy                    Causes the associated objects to also be destroyed
                  :delete_all                 Causes the associated objects to be deleted directly from the database.
                                              Callbacks are not executed
                  :nullify                    Causes the foreign keys to be set to NULL. Callbacks are not executed
                  :restrict_with_exception    Causes an exception to be raised if there are associated records
                  :restrict_with_error        Causes an error to be added to the owner if there are associated objects
:foreign_key      By convention, Rails assumes that the column used to hold the foreign key on this model is the name
                  of the association with the suffix _id added. This option lets you set the name of the foreign key
                  directly
:primary_key      By convention, Rails assumes that the id column is used to hold the primary key of its tables. This
                  option allows you to specify a different column
:inverse_of       Specifies the name of the has_many or has_one association that is the inverse of this association.
                  Does not work in combination with the :polymorphic options
:validate         If set to true, associated objects will be validated whenever you save this object. By default,
                  this option is set to false

In addition, belongs_to supports the following options:
:counter_cache    Can be used to make finding the number of belonging objects more efficient. Also this option is
                  specified on the model that includes the belongs_to declaration, the actual column must be added to
                  the has_many model. You can override the default column name by specifying a custom column name in the
                  counter_cache declaration instead of true. You only need to specify this option on the belongs_to side
                  of the association
:polymorphic      Passing true to this option indicates that this is a polymorphic association
:touch            If set to true, this option will set the updated_at or updated_on timestamp on the associated
                  object to the current time whenever the object is saved or destroyed
:optional         If set to true, the presence of the associated object won't be validated. By default, this option is
                  set to false

Has_one also supports the following options:
:as               Indicates that this is a polymorphic association
:source           Specifies the source association name for a has_one :through association
:source_type      Specifies the source association type for a has_one :through association that proceeds through a
                  polymorphic association
:through          Specifies a join model through which to perform the query

Customizations of the query used by belongs_to or has_one can be achieved via a scope block. You can use any of the
standard querying methods inside the scope block, for example:
where       Lets you specify the conditions that the associated object must meet
includes    Can be used to specify second-order associations that should be eager-loaded when this association is
            used. There is not need to use includes for immediate associations
readonly    If used, the associated object will be read-only when retrieved via the association
select      Lets you override the SQL SELECT clause that is used to retrieve data about the associated object. By
            default, Rails retrieves all columns. If you use the select method on a belongs_to association, you should
            also set the :foreign_key option to guarantee the correct results

You can see if any associated objects exist by using the association.nil? method.

Assigning an object to a belongs_to association does not automatically save the object. It does not save the associated
object either.

When you assign an object to a has_one association, that object is automatically saved in order to update its foreign
key. In addition, any object being replaced is also automatically saved, because its foreign key will change too. If
either of these saves fails due to validation errors, the assignment statement returns false and the assignment itself
is cancelled. If the parent object is unsaved, the child objects are not saved. They will automatically be saved when
the parent object is saved.

When you declare a has_many association, the declaring class automatically gains 16 methods related to the association.
In all of these methods, collection is replaced with the symbol passed as the first argument to has_many, and
collection_singular is replaced with the singularized version of that symbol.
collection                                Returns an array of all of the associated objects. If there are no associated
                                          objects, it returns an empty array
collection<<(object, ...)                 Adds one or more objects to the collection by settling their foreign keys to
                                          the primary key of the calling model
collection.delete(object, ...)            Removes one or more objects from the collection by setting their foreign keys
                                          to NULL
collection.destroy(object, ...)           Removes one or more objects from the collection by running destroy on each
                                          object
collection=(objects)                      Makes the collection contain only the supplied objects, by adding and deleting
                                          as appropriate
collection_singular_ids                   Returns an array of the ids of the objects in the collection
collection_singular_ids=(ids)             Makes the collection contain only the objects identified by the supplied
                                          primary key values, by adding and deleting as appropriate
collection.clear                          Removes all objects from the collection according to the strategy specified by
                                          the dependent option. If no option is given, it follows the default strategy.
                                          For has_many :through association this is delete_all, and for has_many
                                          associations it is setting the foreign keys to NULL
collection.empty?                         Returns true if the collection does not contain any associated objects
collection.size                           Returns the number of objects in the collection
collection.find(...)                      Finds objects within the collection
collection.where(...)                     Finds objects within the collection based on the conditions supplied but the
                                          objects are loaded lazily meaning that the database is queried only when the
                                          object(s) are accessed
collection.exists?(...)                   Checks whether an object meeting the supplied condition exists in the
                                          collection
collection.build(attributes = {}, ...)    Returns a single or array of new objects of the associated type. The object(s)
                                          will be instantiated from the passed attributes, and the link through their
                                          foreign key will be created, but the associated objects will no yet be saved
collection.create(attributes ={})         Returns a single or array of new objects of the associated type. The object(s)
                                          will be instantiated from the passed attributes, the link through its foreign
                                          key will be created and, once it passes all of the validations specified on the
                                          associated model, the associated object will be saved
collection.create!(attributes = {})       Same as above but raises ActiveRecord::RecordInvalid if the record is invalid

The has_many association supports the following options:
:as, :autosave, :class_name, :counter_cache, :dependent, :foreign_key, :inverse_of, :primary_key, :source, :source_type,
:through, and :validate
The option :counter_cache can be used to configure a custom named :counter_cache. You only need this option when you
customized the name of the :counter_cache on the belongs_to association. For all other options see above.

You can use any of the standard querying methods inside the scope block to customize the query used by has_many, for
example:
where         See above
extending     Specifies a named module to extend the association proxy
group         Supplies an attribute name to group the result set by, using a GROUP BY clause in the finder SQL
includes      See above
limit         Lets you restrict the total number of objects that will be fetched through an association
offset        Lets you specify the starting offset for fetching objects via an association. For example,
              -> { offset(11) } will skip the first 11 records
order         Dictates the order in which associated objects will be received
readonly      See above
select        See above
distinct      Keeps the collection free of duplicates. Mostly useful together with the :through option

When you assign an object to a has_many association, that object is automatically saved. If a save fails due to validation
errors, the assignment statement returns false and the assignment itself is cancelled. If the parent object is unsaved,
the child objects are not saved when they are added. All unsaved members of the association will automatically be saved
when the parent is saved. If you want to assign an object to a has_many association without saving it, use the
collection.build method.

When you declare a has_and_belongs_to_many association, the declaring class automatically gains 16 methods related to the
association ( see has_many above ). If the join table for has_and_belongs_to_many associations has additional columns
beyond the two foreign keys, these columns will be added as attributes to records retrieved via that association. Records
returned with additional attributes will always be read-only. The use of extra attributes on the join table is deprecated.
If you require this sort of complex behavior, you should use a has_many :through association instead of
has_and_belongs_to_many.

The has_and_belongs_to_many association supports these options:
:association_foreign_key  Lets you set the name of the foreign key directly. By convention, Rails assumes that the column
                          in the join table used to hold the foreign key pointing to the other model is the name of that
                          model with the suffix_id added
:autosave                 See above
:class_name               See above
:foreign_key              See above
:join_table               Lets you override the default name of the join table
:validate                 If set to false, associated objects will not be validated whenever you save this object. By
                          default, this option is set to true

You can use any of the standard querying methods inside the scope block to customize the query used by
has_and_belongs_to_many.

When you assign an object to a has_and_belongs_to_many association, the object is automatically saved. If a save fails
due to validation errors, the assignment statement returns false and the assignment itself is cancelled. If the parent
object is unsaved the child objects are not saved when they are added. All unsaved members of the association will
automatically be saved when the parent is saved. If you want to assign an object to a has_and_belongs_to_many association
without saving it, use the collection.build method.

There are four available association callbacks which are triggered by events in the life cycle of a collection:
before_add, after_add, before_remove, and after_remove. If a before_add callback throws an exception, the object does not
get added to the collection. Similarly, if a before_remove callback throws an exception, the object does not get removed
from the collection.

You are not limited to the functionality that Rails automatically builds into association proxy objects. You can also
extend these objects through anonymous modules, adding new finders, creators, or other methods. If you have an extension
that should be shared by many associations, you can use a named extension module. Extensions can refer to the internals of
the association proxy using these three attributes of the proxy_association accessor:
proxy_association.owner         Returns the object that the association is part of
proxy_association.reflection    Returns the reflection object that describes the association
proxy_association.target        Returns the associated object for belongs_to or has_one, or the collection of associated
                                objects for has_many or has_and_belongs_to_many


SINGLE TABLE INHERITANCE

Sometimes, you may want to share fields and behavior between different models. First you need to create a parent model with
a 'type' field in the table, without this STI won't work. Next, you generate the models that inherit from the parent model
using the parent=PARENT option without equivalent migration since the table already exists.
