To create a new Rails app the basic way:
$ rails new app_name

To create a new Rails app with RSpec and PostgreSQL:
$ rails new app_name -d postgresql -T

By default, Rails uses Test::Unit for testing. The -T switch turns off the built-in Rails test suite. -d preconfigures
the app for a paraticular type of database. By default, this is SQLite. In the above case we're overriding the default to
use PostgreSQL.

$ bin/rails server starts the application on http://localhost:3000
If there is an error, you'll likely need to run a rake task to get your database built:
$ bin/rake db:create or $ bin/rake db:create RAILS_ENV=test

Edit gemfile:
group :test do
  gem 'rspec-rails'
  gem 'capybara'
end

then run $bundle and after that run $ bin/rails generate rspec:install

In spec/rails_helper.rb add require 'capybara/rails'

File purpose
app         Where your code goes. Contains models, views and controllers, as well as JavaScript & CSS assets
bin         Contains specific versions of executables such as rails and rake for doing low level tasks
config      Configuration information, including database.yml which includes database configuration details and a routes file
db          All our database related code for migrating and seeding the database
lib         Place to put non-rails ruby code
lib/tasks   The home for custom rake tasks
log         Keeps server logs and terminal output
public      Public resources. These will remain available even if the server goes down. Includes all your error pages by
            default.
tmp         Temporary stuff gets stored here.
vendors     A place for resources that you didn't write but are needed for the project, like jQuery; also called 3rd party
            assets.

RESTful verbs:
Create:   POST
Read:     GET
Update:   PUT
Destroy:   DELETE

In summary REST is about Resources and HTTP verbs.

Everything we generate can be destroyed using the same command but replacing 'generate' with 'destroy'

bin/rails g model restaurant name:string rating:integer
This command does two things:
  1. It creates a new model, which tells the app what a 'restaurant' is and what properties it has
  2. It creates a migration which contains instructions for Rake ('Ruby make') to update the database

HTML forms are the common way to submit data through web applications and Rails provides a lot of helpers to streamline the
process of creating them. Example:
<%= form_for Restaurant.new do |f| %>
  <%= f.label :name %>
  <%= f.text_field :name %>
  <%= f.submit %>
<% end %>

The params is what is returned from the form submission.

params[:restaurant] passes in all the params received from the submitted form which is a great risk. As a result, we need
to explicitly state which params we're going to allow our controller to accept, using permit. 
