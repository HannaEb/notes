$ rails new
$ bundle install
$ rails server

# MVC
=> model, view, controller
Keeping your model, view and controller code isolated ensures that you can change one part without the rest. It keeps the code
clean, makes it semantic and easy to understand, and makes it break less.

Models refer to the 'nouns' of the app - the things it deals with and their details.

Controllers contain the 'verbs' - what we can do to the 'nouns' and how they can be interacted with.

Views are used to actually show your users something.

# ORM
=> object-relational mapping
A way of getting your web app talking to a database. E.g. DataMapper in Sinatra, Active Record in Rails.


Active Record is a piece of software that interprets Ruby commands and turns them into SQL queries.

The active record pattern is an architectural design pattern for software that works with databases. In this pattern, each
database table becomes a class, and in instance of that class refers to a specific row within that table.

Migrations describe a set of changes you are making to your database - Rake can interpret them and run the actual SQL commands
that make those changes happen. If something goes wrong, you can roll your database back to a previous state by using those
migration files as they provide a record of every change to your data.

params[:example] passes in all the params received from a submitted form even if the form has been modified by a user. We
therefore have to explicitly state which params we are going to allow our controller to accept, using 'permit'.

Devise is an authentication system that allows users to sign up, login, reset their passwords etc.
=> devise gem

Omniauth allows a user to log into your site using a 3rd party login.

You can get a list of bin/rails tasks available to you, which will often depend on your current directory, by typing
bin/rails --help. All commands can be run with -h or --help for more information.

Rails has lots of helper methods than can be called on in an app. It also sets up blank helper files with a module that gets
automatically included by the app so you can write methods in that module and call them elsewhere.
E.g. app/helpers/restaurant_helper.rb if you have a controller called Restaurants.

ORMs like DataMapper or Active Record provide a friendly way of getting a web app taking to a database.

Active Record is two things:
Firstly, the active record pattern is an architectural design pattern that works with databases. In this pattern, each database
table becomes a class, and an instance of that class refers to a specific row within that table.
Secondly, Active Record is a piece of software that interprets Ruby commands and turns them into SQL queries.

Active Record is the M in MVC which is the layer of the system responsible for representing business data and logic. It
facilitates the creation and use of business objects whose data requires persistent storage to a database.

In Rails, an association is a connection between two Active Record models. There are six types: belongs_to, has_one, has_many,
has_many :through, has_one :through, and has_and_belongs_to_many.

Validations are used to ensure that only valid data is saved into the database.

Migrations are a convenient way to alter a database schema over time in a consistent and easy way. They use a Ruby DSL so that
you don't have to write SQL by hand, allowing your schema and changes to be database independent. You can think of each
migration as being a new 'version' of the database. Active Record will also update your db/schema.rb file to match the
up-to-date structure of your database. 
